{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"클러스터링 시각화","provenance":[{"file_id":"1ihCUYfgi2RD2aO1E-SpLB5M6zoqouuTK","timestamp":1636792799278}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"9XK3FBfgYsGF","executionInfo":{"status":"ok","timestamp":1636985706130,"user_tz":-540,"elapsed":572,"user":{"displayName":"양소영/전자공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10000776643090626624"}}},"source":["from matplotlib import pyplot as plt\n","from sklearn.metrics import accuracy_score\n","import pandas as pd\n","import numpy as np\n","from sklearn import preprocessing\n","from sklearn.mixture import GaussianMixture\n","from sklearn.cluster import DBSCAN\n","\n","from sklearn.cluster import estimate_bandwidth\n","from sklearn.cluster import MeanShift\n","import math\n","import time\n","import warnings ; warnings.filterwarnings('ignore')\n","import seaborn as sns\n","from sklearn.metrics import accuracy_score, silhouette_samples, silhouette_score\n","from sklearn import preprocessing\n","from sklearn.model_selection import cross_val_score, StratifiedKFold \n","skf = StratifiedKFold(n_splits=10) \n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import GridSearchCV\n","import sys\n","from sklearn.cluster import KMeans\n","from sklearn import metrics\n","\n","#for scale and encorder\n","class PreprocessPipeline(): \n","    def __init__(self, num_process, cat_process, verbose=False): \n","        #super(PreprocessPipeline, self).__init__() \n","        self.num_process = num_process \n","        self.cat_process = cat_process \n","        #for each type\n","        if num_process == 'standard': \n","            self.scaler = preprocessing.StandardScaler() \n","        elif num_process == 'minmax': \n","            self.scaler = preprocessing.MinMaxScaler() \n","        elif num_process == 'maxabs': \n","            self.scaler = preprocessing.MaxAbsScaler() \n","        elif num_process == 'robust': \n","            self.scaler = preprocessing.RobustScaler() \n","        else: \n","            raise ValueError(\"Supported 'num_process' : 'standard','minmax','maxabs','robust'\")   \n","        if cat_process == 'onehot': \n","            self.encoder = preprocessing.OneHotEncoder(sparse=False, handle_unknown='ignore')  \n","        elif cat_process == 'ordinal': \n","            self.encoder = preprocessing.OrdinalEncoder() \n","        elif cat_process == 'label':\n","            self.encoder = preprocessing.LabelEncoder()\n","           \n","        else: \n","            raise ValueError(\"Supported 'cat_process' : 'onehot', ordinal','label'\") \n","        self.verbose=verbose \n","        \n","        #do Preprocess\n","    def process(self, X): \n","        X_cats = X.select_dtypes(np.object).copy() \n","        X_nums = X.select_dtypes(exclude=np.object).copy() \n","        #Xt_cats = Xt.select_dtypes(np.object).copy() \n","        #Xt_nums = Xt.select_dtypes(exclude=np.object).copy() \n","\n","        if self.verbose: \n","            print(f\"Categorica Colums : {list(X_cats)}\") \n","            print(f\"Numeric Columns : {list(X_nums)}\") \n","\n","        if self.verbose: \n","            print(f\"Categorical cols process method : {self.cat_process.upper()}\") \n","  \n","        X_cats = self.encoder.fit_transform(X_cats) \n","        #Xt_cats = self.encoder.transform(Xt_cats) \n","    \n","\n","        if self.verbose: \n","            print(f\"Numeric columns process method : {self.num_process.upper()}\") \n","        X_nums = self.scaler.fit_transform(X_nums) \n","        #Xt_nums = self.scaler.transform(Xt_nums) \n","        X_nums=pd.DataFrame(X_nums)\n","        X_cats=pd.DataFrame(X_cats)\n","        X_processed = pd.concat([X_nums, X_cats],axis=1) \n","        #Xt_processed = np.concatenate([Xt_nums, Xt_cats], axis=-1) \n","\n","\n","        return X_processed"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"3VKK8In0zs91","executionInfo":{"status":"ok","timestamp":1636985706131,"user_tz":-540,"elapsed":7,"user":{"displayName":"양소영/전자공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10000776643090626624"}}},"source":["df_kmeans=pd.DataFrame()\n","df_em=pd.DataFrame()\n","df_dbscan=pd.DataFrame()\n","df_meanshift=pd.DataFrame()"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"id":"22JyJudhY2VD","executionInfo":{"status":"ok","timestamp":1636985706131,"user_tz":-540,"elapsed":7,"user":{"displayName":"양소영/전자공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10000776643090626624"}}},"source":["def purity_score(y_true, y_pred):\n","# compute contingency matrix (also called confusion matrix)\n","  contingency_matrix = metrics.cluster.contingency_matrix(y_true,y_pred)\n","  if np.sum(contingency_matrix)==0:\n","    print(\"contigency_matrix is 0\")\n","  else:\n","    return np.sum(np.amax(contingency_matrix, axis=0))/np.sum(contingency_matrix)\n","# do process on I want \n","class AutoProcess():\n","    def __init__(self, verbose=False):\n","        \n","        self.pp = PreprocessPipeline\n","        self.verbose = verbose\n","\n","    def purity_score(y_true, y_pred):\n","  # compute contingency matrix (also called confusion matrix)\n","      contingency_matrix = metrics.cluster.contingency_matrix(y_true,y_pred)\n","      return np.sum(np.amax(contingency_matrix, axis=0))/np.sum(contingency_matrix)\n","\n","    def run(self, X,group):\n","        methods = []\n","        scores = []\n","        print(X.shape)\n","\n","        def makePlt23(df, label, k, count, title):\n","          if(len(df.columns)==3):\n","              enc=preprocessing.OrdinalEncoder()\n","              op = enc.fit_transform(df['ocean_proximity'].to_numpy().reshape(-1, 1))\n","              df['ocean_proximity'] = op\n","          # list for store feature data for each cluster\n","          store = [[[] for col in range(len(df.columns))] for row in range(k)]\n","\n","          for m in range(len(label)):\n","              for n in range(k):\n","                  if (label[m] == n):\n","                      for o in range(len(df.columns)):\n","                          store[n][o].append(df.iloc[m:m + 1, o:o + 1].values[0][0])\n","\n","          c = ['b.', 'r.', 'g.', 'y.', 'c.', 'm.', 'k.']\n","          if (len(df.columns) == 2):\n","              plt.subplot(120 + count, title=title)\n","              plt.xlabel(df.columns[0])\n","              plt.ylabel(df.columns[1])\n","              for p in range(k):\n","                  plt.plot(store[p][0], store[p][1], c[p])\n","          if (len(df.columns) == 3):\n","              plt.subplot(120 + count, projection='3d', title=title)\n","              plt.xlabel(df.columns[0])\n","              plt.ylabel(df.columns[1])\n","              for p in range(k):\n","                  plt.plot(store[p][0], store[p][1], store[p][2], c[p])\n","\n","        def makePltBig(df, label, k):\n","          if (len(df.columns) == 3):\n","              enc = preprocessing.OrdinalEncoder()\n","              op = enc.fit_transform(df['ocean_proximity'].to_numpy().reshape(-1, 1))\n","              df['ocean_proximity'] = op\n","          # list for store feature data for each cluster\n","          store = [[[] for col in range(len(df.columns))] for row in range(k)]\n","\n","          for m in range(len(label)):\n","              for n in range(k):\n","                  if (label[m] == n):\n","                      for o in range(len(df.columns)):\n","                          store[n][o].append(df.iloc[m:m + 1, o:o + 1].values[0][0])\n","\n","          if(len(df.columns)==2):\n","              for j in range(int(k/9)+1):\n","                  for i in range(j*9, (j+1)*9, 1):\n","                      if(i<k):\n","                          plt.subplot(330+(i-(j*9)+1), title='Cluster N.'+str(i+1))\n","                          plt.xlabel(df.columns[0])\n","                          plt.ylabel(df.columns[1])\n","                          plt.plot(store[i][0], store[i][1], '.')\n","                  plt.show()\n","          if (len(df.columns) == 3):\n","              for j in range(int(k / 9) + 1):\n","                  for i in range(j * 9, (j + 1) * 9, 1):\n","                      if (i < k):\n","                          plt.subplot(330 + (i - (j * 9) + 1), projection='3d', title='Cluster N.' + str(i + 1))\n","                          plt.xlabel(df.columns[0])\n","                          plt.ylabel(df.columns[1])\n","                          plt.plot(store[i][0], store[i][1], store[i][2], '.')\n","                  plt.show()\n","        \n","        for num_process in ['minmax']:#'standard','robust',,'maxabs'\n","            for cat_process in ['onehot']:#,'Label'ordinal',,'label'\n","                # if self.verbose:\n","                #     print(\"\\n------------------------------------------------------\\n\")\n","                #     print(f\"Numeric Process : {num_process}\")\n","                #     print(f\"Categorical Process : {cat_process}\")\n","                methods.append([num_process, cat_process])\n","\n","                pipeline = self.pp(num_process=num_process, cat_process=cat_process)\n","                \n","                X_processed= pipeline.process(X)\n","                \n","                #print(X_processed.shape)\n","                #Classifier part\n","                for model in ['dbscan','mean-shift']:#,'em','dbscan','mean-shift''k-mean',,'mean-shift''dbscan'\n","                    # if self.verbose:\n","                    #     print(f\"\\nCluster model: {model}\")\n","                    # countPlt=0\n","                    # if model =='k-mean': \n","                    #     k_num = {4}\n","                    #     for k in k_num:\n","                    #         countPlt=countPlt+1\n","                    #         c_mdel = KMeans(n_clusters=k)\n","                    #         #print(X_processed)\n","                    #         c_mdel.fit(X_processed)\n","                    #         sample = X.copy()\n","                    #         sample['cluster'] = c_mdel.labels_\n","                    #         sample_score = silhouette_samples(X_processed,sample['cluster'] )\n","                    #         sample['silhouette_'] = sample_score\n","                    #         sample_score = purity_score(y,sample['cluster'])\n","                    #         sample['purity'] = sample_score\n","                    #         score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'k='+str(k), str(sample['silhouette_'].mean()), str(sample['purity'].mean())]\n","                    #         df_kmeans.loc[2]=[]\n","                    #         makePlt23(X, sample['cluster'], k, countPlt, 'k='+str(k))\n","                    #     plt.show()\n","\n","                    # elif model == 'em':\n","                    #     k_num ={4}\n","                    #     countPlt = 0\n","                    #     for k in k_num:\n","                    #         countPlt+=1\n","                    #         c_mdel = GaussianMixture(n_components=k, random_state=0).fit(X_processed)\n","                    #         sample = X.copy()\n","                    #         c_mdel_cluster_labels = c_mdel.predict(X_processed)\n","                    #         sample['cluster'] = c_mdel_cluster_labels\n","                    #         sample_score = silhouette_samples(X_processed,sample['cluster'])\n","                    #         sample['silhouette_'] = sample_score\n","                    #         # score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'k='+str(k), str(sample['silhouette_'].mean())]\n","                    #         sample_score = purity_score(y,sample['cluster'])\n","                    #         sample['purity'] = sample_score\n","                    #         score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'k='+str(k), str(sample['silhouette_'].mean()), str(sample['purity'].mean())]\n","                    #         makePlt23(X, sample['cluster'], k, countPlt, 'k='+str(k))\n","                    #     plt.show()\n","                  \n","\n","                    # if model == 'dbscan':\n","                    #     esp = {0.9}\n","                    #     ms = {2}\n","                    #     for e in esp:\n","                    #       countPlt=0\n","                    #       for m in ms:\n","                    #         countPlt+=1\n","                    #         c_mdel = DBSCAN(eps = e, min_samples=m)\n","                    #         sample = X.copy()\n","                    #         # sample == preprocessing 전 dataframe\n","                    #         # X_processed == preprocessing 후 dataframe(columne 이름 다 0임)\n","                    #         sample['cluster'] = pd.DataFrame(c_mdel.fit_predict(X_processed))\n","                    #         # sample['cluster'] == cluster label\n","                    #         sample_score = silhouette_samples(X_processed,sample['cluster'])\n","                    #         sample['silhouette_'] = sample_score\n","                    #         sample_score = purity_score(y,sample['cluster'])\n","                    #         sample['purity'] = sample_score\n","                    #         # score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'k='+str(k), str(sample['silhouette_'].mean()), str(sample['purity'].mean())]\n","                    #         score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'eps:'+str(e)+' m:'+str(m)+' cluster:'+str(len(sample['cluster'].value_counts())), str(sample['silhouette_'].mean()), str(sample['purity'].mean())]\n","                    #         k = len(sample[['cluster']].groupby('cluster').count())\n","\n","                    #         makePlt23(X, sample['cluster'], k, countPlt, 'eps='+str(e)+' m='+str(m))\n","                    #     plt.show()\n","                              \n","                    if model == 'mean-shift':\n","                      best_bandwidth_list={0.7}\n","                      # countPlt = 0\n","                      for best_bandwidth in best_bandwidth_list:\n","                        # countPlt+=1\n","                        # best_bandwidth = estimate_bandwidth(X_processed)\n","                        c_mdel = MeanShift(bandwidth=best_bandwidth)\n","                        c_mdel_cluster_labels = c_mdel.fit_predict(X_processed)\n","                        sample = X.copy()\n","                        sample['cluster'] = c_mdel_cluster_labels\n","\n","                        # print('cluster labels type: ', np.unique(c_mdel_cluster_labels))\n","                        # print('bandwidth값 : ',best_bandwidth)\n","                        sample_score = silhouette_samples(X_processed,sample['cluster'])\n","                        sample['silhouette_'] = sample_score\n","                        # print('aver sihouette_: ' +str(sample['silhouette_'].mean()))\n","                        # print(sample.groupby('cluster')['silhouette_'].mean())\n","                        # score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'bandwidth: '+str(best_bandwidth), str(sample['silhouette_'].mean())]\n","                        sample_score = purity_score(y,sample['cluster'])\n","                        sample['purity'] = sample_score\n","                        # score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'k='+str(k), str(sample['silhouette_'].mean()), str(sample['purity'].mean())]\n","                        score_results.loc[len(score_results)] = [group, num_process, cat_process, model,'bandwidth:'+str(best_bandwidth), str(sample['silhouette_'].mean()),str(sample['purity'].mean())]\n","                        k = len(sample[['cluster']].groupby('cluster').count())\n","                        plt.figure(figsize=(10,10))\n","                        if(k<=7):\n","                          plt.figure(figsize=(10,10))\n","                          makePlt23(X, sample['cluster'], k, 1, 'bandwidth='+str(best_bandwidth))\n","                        else:\n","                          plt.figure(figsize=(10,10))\n","                          makePltBig(X, sample['cluster'], k)\n","                        \n","                        plt.show()\n","                        # makePlt23(X, sample['cluster'], k, countPlt, 'bandwidth='+str(best_bandwidth))\n","                    # plt.show()\n","        print('------------------------------------------------------')\n","                    \n","\n","\n","        return\n","\n"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":926},"id":"4hY8yl68YyVI","executionInfo":{"status":"ok","timestamp":1636985729154,"user_tz":-540,"elapsed":23029,"user":{"displayName":"양소영/전자공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10000776643090626624"}},"outputId":"db0921ed-f05c-4ac6-bf26-3f8deeb410d9"},"source":["################\n","#make result table\n","score_sample = {'Group':[\"Group\"],'Scaler':[\"Sample\"], 'Encoder':[\"Sample\"], 'Model':[\"Sample\"],'Best_para':[\"Sample\"], \"Score\":[1], \"Purity\":[1]}\n","score_results = pd.DataFrame(score_sample)\n","score_sample2 = {'type':[\"error\"],'info':[\"info\"]}\n","error_data = pd.DataFrame(score_sample2)\n","\n","\n","# kfold = KFold(5, True, 1)\n","\n","# pd.set_option('display.max_row', 10000)\n","# Import the data file\n","df = pd.read_csv('bank.csv', na_values='unknown')\n","# print(df.dtypes)\n","# print(df.isna().sum())\n","\n","# show all columns \n","pd.options.display.max_columns = None\n","# 잘려 보이는거 해결\n","pd.options.display.max_colwidth=-1\n","pd.options.display.width=None\n","# pd.set_option('display.width', None)\n","\n","##setting data set\n","#ex = df.iloc[:,8]\n","# drop default and poutcome columns\n","df.drop('default', axis=1, inplace=True)\n","df.drop('poutcome', axis=1, inplace=True)\n","\n","df.dropna(inplace=True)\n","# print(df.info())\n","\n","# set index again\n","df.index=np.arange(0, len(df))\n","\n","x=df.drop(['deposit'], axis=1)\n","y=df['deposit']\n","\n","# print(df.isna().sum())\n","#group 1 room\n","# X1 = df[['total_rooms','total_bedrooms']]\n","X1 = df[['balance','job']]\n","\n","\n","# #group 2 where\n","# X2 = df[['longitude','latitude','ocean_proximity']]\n","\n","# #group 3 spec\n","# X3 = df[['housing_median_age','total_rooms','total_bedrooms','ocean_proximity']]\n","\n","\n","# #group 5 all\n","# X5 = df\n","# print(score_results)\n","autoprocess = AutoProcess(verbose=True)\n","autoprocess.run(X1,'room')\n","# autoprocess.run(X2,'where')\n","# autoprocess.run(X3,'spec')\n","# autoprocess.run(X4,'eviroment')\n","# autoprocess.run(X5,'all')\n","print(score_results)\n","\n","# sys.stdout = open('E:\\PythonWorkSpace\\score result.txt', 'w')\n","\n","\n","# sys.stdout.close()\n","\n"],"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["(8393, 2)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 9 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["------------------------------------------------------\n","   Group  Scaler Encoder       Model      Best_para               Score  \\\n","0  Group  Sample  Sample  Sample      Sample         1                    \n","1  room   minmax  onehot  mean-shift  bandwidth:0.7  0.9818568380974231   \n","\n","               Purity  \n","0  1                   \n","1  0.5658286667461143  \n"]}]}]}