# -*- coding: utf-8 -*-
"""phw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RQqvMw-vTPagc0PEalxSf8EYWYZT2ZSf
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn import preprocessing

from sklearn.tree import DecisionTreeClassifier 
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
#from sklearn.cross_validation import train_test_split

row = pd.read_csv('/content/drive/MyDrive/머신러닝/breast-cancer-wisconsin.csv')
df_data = np.array(row)
col = ['Sameple code number', 'Clump Thickness', 'Uniformity of Cell Size', 'Uniformity of Cell Shape', 'Marginal Adhesion', 'Single Epithelial Cell Size', 'Bare Nuclei','Bland Chromatin', 'Normal Nucleoli', 'Mitoses','class']

df= pd.DataFrame(df_data, columns=col)
print(df)
X= df[['Sameple code number', 'Clump Thickness', 'Uniformity of Cell Size', 'Uniformity of Cell Shape', 'Marginal Adhesion', 'Single Epithelial Cell Size', 'Bare Nuclei', 'Bland Chromatin', 'Normal Nucleoli','Mitoses']]
y=np.array(df['class'])

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state =130)
X_scaled_d = preprocessing.StandardScaler().fit_transform(X_train)
X_test_scaled = preprocessing.StandardScaler().fit_transform(X_test)

X_encoding_tr=preprocessing.OrdinalEncoder().fit_transform(X_scaled_d)
X_encoding_te=preprocessing.OrdinalEncoder().fit_transform(X_test_scaled)

print(X_encoding_tr)
print(X_encoding_te)
dtree = DecisionTreeClassifier()

parameters = {'max_depth':[7]}


grid_dtree = GridSearchCV(dtree, param_grid=parameters, cv=3, refit=True, return_train_score=True)

grid_dtree=grid_dtree.fit(X_encoding_tr,y_train)
print('socore:',grid_dtree.score(X_encoding_te,y_test))
# score_df = pd.DataFrame(grid_dtree.cv_results_)
# score_df[['params', 'mean_test_score', 'rank_test_score','split0_test_score', 'split1_test_score', 'split2_test_score']]

# print('GridSerchCV best parameter:', grid_dtree.best_params)
# print('GridSerch best accuracy:{0:.4f}'.form(grid_dtree.best_score_))
# # estimator = grid_dtree.best_estimator_

from google.colab import drive
drive.mount('/content/drive')

